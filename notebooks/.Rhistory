## You must use these dice for Part 1
dice <- PresetDice$new(
rolls = c(6,4, 5,3, 3,5, 4,4, 4,4, 2,2, 4,3, 4,4, 1,4,
3,4, 1,2, 3,6, 5,4, 5,5, 1,2, 5,4, 3,3, 6,1,
1,1, 2,3, 5,5, 5,4, 4,1, 2,2, 2,4),
verbose = TRUE
)
set.seed(2)
chance <- CardDeck$new(chancedeck, verbose = TRUE)
community <- CardDeck$new(communitydeck, verbose = TRUE)
# if your chance cards different from mine,
# check to make sure sample(15) returns the following
# > set.seed(2)
# > sample(15)
#  [1]  5  6 14  8  1 11  9  2  3 10  7 12  4 13 15
player1 <- Player$new(verbose = TRUE)
monopoly <- SpaceTracker$new(verbose = TRUE)
for(i in 1:20){
cat("--- Turn", i,"---\n")
take_turn(player1, monopoly)
cat("\n")
}
monopoly$counts
cbind(gameboard, counts = monopoly$counts)
# source("solutions.R")  # edit with your file name
source("monopoly_starter_code.R")  # edit with your file name
## You must use these dice for Part 1
dice <- PresetDice$new(
rolls = c(6,4, 5,3, 3,5, 4,4, 4,4, 2,2, 4,3, 4,4, 1,4,
3,4, 1,2, 3,6, 5,4, 5,5, 1,2, 5,4, 3,3, 6,1,
1,1, 2,3, 5,5, 5,4, 4,1, 2,2, 2,4),
verbose = TRUE
)
set.seed(2)
chance <- CardDeck$new(chancedeck, verbose = TRUE)
community <- CardDeck$new(communitydeck, verbose = TRUE)
# if your chance cards different from mine,
# check to make sure sample(15) returns the following
# > set.seed(2)
# > sample(15)
#  [1]  5  6 14  8  1 11  9  2  3 10  7 12  4 13 15
player1 <- Player$new(verbose = TRUE)
monopoly <- SpaceTracker$new(verbose = TRUE)
for(i in 1:20){
cat("--- Turn", i,"---\n")
take_turn(player1, monopoly)
cat("\n")
}
monopoly$counts
cbind(gameboard, counts = monopoly$counts)
# source("solutions.R")  # edit with your file name
source("monopoly_starter_code.R")  # edit with your file name
## You must use these dice for Part 1
dice <- PresetDice$new(
rolls = c(6,4, 5,3, 3,5, 4,4, 4,4, 2,2, 4,3, 4,4, 1,4,
3,4, 1,2, 3,6, 5,4, 5,5, 1,2, 5,4, 3,3, 6,1,
1,1, 2,3, 5,5, 5,4, 4,1, 2,2, 2,4),
verbose = TRUE
)
set.seed(2)
chance <- CardDeck$new(chancedeck, verbose = TRUE)
community <- CardDeck$new(communitydeck, verbose = TRUE)
# if your chance cards different from mine,
# check to make sure sample(15) returns the following
# > set.seed(2)
# > sample(15)
#  [1]  5  6 14  8  1 11  9  2  3 10  7 12  4 13 15
player1 <- Player$new(verbose = TRUE)
monopoly <- SpaceTracker$new(verbose = TRUE)
for(i in 1:20){
cat("--- Turn", i,"---\n")
take_turn(player1, monopoly)
cat("\n")
}
monopoly$counts
cbind(gameboard, counts = monopoly$counts)
player1 <- Player$new(verbose = TRUE)
monopoly <- SpaceTracker$new(verbose = TRUE)
for(i in 1:20){
cat("--- Turn", i,"---\n")
take_turn(player1, monopoly)
cat("\n")
}
monopoly$counts
cbind(gameboard, counts = monopoly$counts)
## You must use these dice for Part 1
dice <- PresetDice$new(
rolls = c(6,4, 5,3, 3,5, 4,4, 4,4, 2,2, 4,3, 4,4, 1,4,
3,4, 1,2, 3,6, 5,4, 5,5, 1,2, 5,4, 3,3, 6,1,
1,1, 2,3, 5,5, 5,4, 4,1, 2,2, 2,4),
verbose = TRUE
)
## You must use these dice for Part 1
dice <- PresetDice$new(
rolls = c(6,4, 5,3, 3,5, 4,4, 4,4, 2,2, 4,3, 4,4, 1,4,
3,4, 1,2, 3,6, 5,4, 5,5, 1,2, 5,4, 3,3, 6,1,
1,1, 2,3, 5,5, 5,4, 4,1, 2,2, 2,4),
verbose = TRUE
)
set.seed(2)
chance <- CardDeck$new(chancedeck, verbose = TRUE)
community <- CardDeck$new(communitydeck, verbose = TRUE)
# if your chance cards different from mine,
# check to make sure sample(15) returns the following
# > set.seed(2)
# > sample(15)
#  [1]  5  6 14  8  1 11  9  2  3 10  7 12  4 13 15
player1 <- Player$new(verbose = TRUE)
monopoly <- SpaceTracker$new(verbose = TRUE)
for(i in 1:20){
cat("--- Turn", i,"---\n")
take_turn(player1, monopoly)
cat("\n")
}
monopoly$counts
cbind(gameboard, counts = monopoly$counts)
# source("solutions.R")  # edit with your file name
source("monopoly_starter_code.R")  # edit with your file name
## You must use these dice for Part 1
dice <- PresetDice$new(
rolls = c(6,4, 5,3, 3,5, 4,4, 4,4, 2,2, 4,3, 4,4, 1,4,
3,4, 1,2, 3,6, 5,4, 5,5, 1,2, 5,4, 3,3, 6,1,
1,1, 2,3, 5,5, 5,4, 4,1, 2,2, 2,4),
verbose = TRUE
)
set.seed(2)
chance <- CardDeck$new(chancedeck, verbose = TRUE)
community <- CardDeck$new(communitydeck, verbose = TRUE)
# if your chance cards different from mine,
# check to make sure sample(15) returns the following
# > set.seed(2)
# > sample(15)
#  [1]  5  6 14  8  1 11  9  2  3 10  7 12  4 13 15
player1 <- Player$new(verbose = TRUE)
monopoly <- SpaceTracker$new(verbose = TRUE)
for(i in 1:20){
cat("--- Turn", i,"---\n")
take_turn(player1, monopoly)
cat("\n")
}
monopoly$counts
cbind(gameboard, counts = monopoly$counts)
# source("solutions.R")  # edit with your file name
source("monopoly_starter_code.R")  # edit with your file name
## You must use these dice for Part 1
dice <- PresetDice$new(
rolls = c(6,4, 5,3, 3,5, 4,4, 4,4, 2,2, 4,3, 4,4, 1,4,
3,4, 1,2, 3,6, 5,4, 5,5, 1,2, 5,4, 3,3, 6,1,
1,1, 2,3, 5,5, 5,4, 4,1, 2,2, 2,4),
verbose = TRUE
)
set.seed(2)
chance <- CardDeck$new(chancedeck, verbose = TRUE)
community <- CardDeck$new(communitydeck, verbose = TRUE)
# if your chance cards different from mine,
# check to make sure sample(15) returns the following
# > set.seed(2)
# > sample(15)
#  [1]  5  6 14  8  1 11  9  2  3 10  7 12  4 13 15
player1 <- Player$new(verbose = TRUE)
monopoly <- SpaceTracker$new(verbose = TRUE)
for(i in 1:20){
cat("--- Turn", i,"---\n")
take_turn(player1, monopoly)
cat("\n")
}
monopoly$counts
cbind(gameboard, counts = monopoly$counts)
# source("solutions.R")  # edit with your file name
source("monopoly_starter_code.R")  # edit with your file name
dice <- PresetDice$new(
rolls = c(3,3, 1,2, 3,3, 3,4),
verbose = TRUE
)
player1 <- Player$new(verbose = TRUE, pos = 25)
monopoly <- SpaceTracker$new(verbose = TRUE)
for(i in 1:3){
cat("--- Turn", i,"---\n")
take_turn(player1, monopoly)
cat("\n")
}
print(setNames(monopoly$counts, 1:40))
## You must use these dice for Part 1
dice <- PresetDice$new(
rolls = c(6,4, 5,3, 3,5, 4,4, 4,4, 2,2, 4,3, 4,4, 1,4,
3,4, 1,2, 3,6, 5,4, 5,5, 1,2, 5,4, 3,3, 6,1,
1,1, 2,3, 5,5, 5,4, 4,1, 2,2, 2,4),
verbose = TRUE
)
set.seed(2)
chance <- CardDeck$new(chancedeck, verbose = TRUE)
community <- CardDeck$new(communitydeck, verbose = TRUE)
# if your chance cards different from mine,
# check to make sure sample(15) returns the following
# > set.seed(2)
# > sample(15)
#  [1]  5  6 14  8  1 11  9  2  3 10  7 12  4 13 15
player1 <- Player$new(verbose = TRUE)
monopoly <- SpaceTracker$new(verbose = TRUE)
for(i in 1:20){
cat("--- Turn", i,"---\n")
take_turn(player1, monopoly)
cat("\n")
}
monopoly$counts
cbind(gameboard, counts = monopoly$counts)
library(dplyr)
## Use non-verbose random dice for Part 2
set.seed(2)
chance <- CardDeck$new(chancedeck, verbose = FALSE)
community <- CardDeck$new(communitydeck, verbose = FALSE)
dice <- RandomDice$new()
player1 <- Player$new(verbose = FALSE)
player2 <- Player$new(verbose = FALSE)
monopoly <- SpaceTracker$new(verbose = FALSE)
for(g in 1:1000) {
if(g %% 100 == 0) {
cat("#### SIMULATING GAME", g, "##### \n")
}
for(i in 1:150){
take_turn(player1, monopoly)
take_turn(player2, monopoly)
}
}
print(setNames(monopoly$counts, 1:40))
results <- cbind(gameboard, tally = monopoly$counts)
results <- cbind(results, rel = monopoly$counts/sum(monopoly$counts))
print(results)
arrange(results, desc(tally))
color_vec[c(32,33,35)] <- "darkgreen" # pacific, n. carolina, pennsylvania
# set colors for the bar plot
color_vec <- rep(NA, 40)
color_vec[c(2,4)] <- "chocolate4" # mediterranean, baltic
color_vec[c(7,9,10)] <- "lightskyblue" # oriental, vermont, connecticut
color_vec[c(12,14,15)] <- "darkorchid2" # st charles, states, virgina
color_vec[c(17,19,20)] <- "darkorange" # st james, tennessee, new york
color_vec[c(22,24,25)] <- "red2" # kentucky, indiana, illinois
color_vec[c(27,28,30)] <- "gold1" # atlantic, ventnor, marvin
color_vec[c(32,33,35)] <- "darkgreen" # pacific, n. carolina, pennsylvania
color_vec[c(38,40)] <- "blue3" # park place, boardwalk
color_vec[c(6,16,26,36)] <- "gray14" # railroads
color_vec[c(13,29)] <- "palegreen1" # utilities
color_vec[c(8,23,37)] <- "salmon2" # chance
color_vec[c(3,18,34)] <- "deepskyblue" # community chest
barplot(monopoly$counts,
main = "Barplot of Frequency of Landing for Each Space",
xlab = "Space Number", ylab = "Number of Landings",
las = 2, col = color_vec, names.arg = 1:40, cex.names = 0.65)
# this one sets the y-limits so the max count of jail doesn't shrink everything
barplot(monopoly$counts,
main = "Barplot of Frequency of Landing for Each Space",
xlab = "Space Number", ylab = "Number of Landings",
las = 2, col = color_vec, names.arg = 1:40, cex.names = 0.65,
ylim = c(0, sort(monopoly$counts, decreasing = TRUE)[2]))
## Use non-verbose random dice for Part 2
set.seed(2)
chance <- CardDeck$new(chancedeck, verbose = FALSE)
community <- CardDeck$new(communitydeck, verbose = FALSE)
dice <- RandomDice$new()
player1 <- Player$new(verbose = FALSE)
player2 <- Player$new(verbose = FALSE)
monopoly <- SpaceTracker$new(verbose = FALSE)
for(g in 1:1000) {
if(g %% 100 == 0) {
cat("#### SIMULATING GAME", g, "##### \n")
}
for(i in 1:150){
take_turn(player1, monopoly)
take_turn(player2, monopoly)
}
}
print(setNames(monopoly$counts, 1:40))
results <- cbind(gameboard, tally = monopoly$counts)
results <- cbind(results, rel = monopoly$counts/sum(monopoly$counts))
print(results)
arrange(results, desc(tally))
# source("solutions.R")  # edit with your file name
source("monopoly_starter_code.R")  # edit with your file name
## Use non-verbose random dice for Part 2
set.seed(2)
chance <- CardDeck$new(chancedeck, verbose = FALSE)
community <- CardDeck$new(communitydeck, verbose = FALSE)
dice <- RandomDice$new()
player1 <- Player$new(verbose = FALSE)
player2 <- Player$new(verbose = FALSE)
monopoly <- SpaceTracker$new(verbose = FALSE)
for(g in 1:1000) {
if(g %% 100 == 0) {
cat("#### SIMULATING GAME", g, "##### \n")
}
for(i in 1:150){
take_turn(player1, monopoly)
take_turn(player2, monopoly)
}
}
print(setNames(monopoly$counts, 1:40))
results <- cbind(gameboard, tally = monopoly$counts)
results <- cbind(results, rel = monopoly$counts/sum(monopoly$counts))
print(results)
arrange(results, desc(tally))
# set colors for the bar plot
color_vec <- rep(NA, 40)
color_vec[c(2,4)] <- "chocolate4" # mediterranean, baltic
color_vec[c(7,9,10)] <- "lightskyblue" # oriental, vermont, connecticut
color_vec[c(12,14,15)] <- "darkorchid2" # st charles, states, virgina
color_vec[c(17,19,20)] <- "darkorange" # st james, tennessee, new york
color_vec[c(22,24,25)] <- "red2" # kentucky, indiana, illinois
color_vec[c(27,28,30)] <- "gold1" # atlantic, ventnor, marvin
color_vec[c(32,33,35)] <- "darkgreen" # pacific, n. carolina, pennsylvania
color_vec[c(38,40)] <- "blue3" # park place, boardwalk
color_vec[c(6,16,26,36)] <- "gray14" # railroads
color_vec[c(13,29)] <- "palegreen1" # utilities
color_vec[c(8,23,37)] <- "salmon2" # chance
color_vec[c(3,18,34)] <- "deepskyblue" # community chest
barplot(monopoly$counts,
main = "Barplot of Frequency of Landing for Each Space",
xlab = "Space Number", ylab = "Number of Landings",
las = 2, col = color_vec, names.arg = 1:40, cex.names = 0.65)
# this one sets the y-limits so the max count of jail doesn't shrink everything
barplot(monopoly$counts,
main = "Barplot of Frequency of Landing for Each Space",
xlab = "Space Number", ylab = "Number of Landings",
las = 2, col = color_vec, names.arg = 1:40, cex.names = 0.65,
ylim = c(0, sort(monopoly$counts, decreasing = TRUE)[2]))
library(dyplr)
library(dpylr)
library(dplyr)
df <- read.csv("training_df.csv")
setwd("~/Code/Stubhub/notebooks")
df <- read.csv("training_df.csv")
df <- read.csv("training_df.csv")
df
contrasts(df$homeTeam)
df <- read.csv("training_df.csv")
df$homeTeam <- factor(df$homeTeam)
contrasts(df$homeTeam)
df <- read.csv("training_df.csv")
df$homeTeam <- factor(df$homeTeam)
df$awayTeam <- factor(df$awayTeam)
df
relevel(df$homeTeam)
relevel(df$homeTeam, ref = "Los Angeles Dodgers")
auto_data <- read.table("auto.txt", header = TRUE)
head(auto_data)
ozone.data <- read.csv("ozone.csv")
head(ozone.data)
ozone.data$SURFACE <- factor(ozone.data$SURFACE)
# We adjust the coding using the following command. More specifically, we indicate that "Surface" is the reference category.
ozone.data$SURFACE <- relevel(ozone.data$SURFACE, ref = "Surface")
# We can check the encoding used using the function "contrasts".
contrasts(ozone.data$SURFACE)
ozone.data$SURFACE <- factor(ozone.data$SURFACE)
# We adjust the coding using the following command. More specifically, we indicate that "Surface" is the reference category.
ozone.data$SURFACE <- relevel(ozone.data$SURFACE, ref = "Surface")
# We can check the encoding used using the function "contrasts".
contrasts(ozone.data$SURFACE)
ozone.data
ozone.data$SURFACE <- factor(ozone.data$SURFACE)
# We adjust the coding using the following command. More specifically, we indicate that "Surface" is the reference category.
ozone.data$SURFACE <- relevel(ozone.data$SURFACE, ref = "Surface")
# We can check the encoding used using the function "contrasts".
contrasts(ozone.data$SURFACE)
lm(price~ homeTeam + awayTeam + ticket_count + days_to_game, data = df)
summary(model)
model <- lm(price~ homeTeam + awayTeam + ticket_count + days_to_game, data = df)
model
summary(model)
anova(model)
summary(model)
lm(price~ ticket_count + days_to_game, data = df)
lm(price~ days_to_game, data = df)
model <- lm(price~ awayTeam + ticket_count + days_to_game, data = df)
model
summary(model)
model <- lm(price~ homeTeam + ticket_count + days_to_game, data = df)
model
summary(model)
model <- lm(price~ homeTeam + awayTeam + ticket_count + days_to_game, data = df)
model
summary(model)
df <- read.csv("training_df.csv")
df$homeTeam <- factor(df$homeTeam)
df$awayTeam <- factor(df$awayTeam)
head(df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "Boston Red Sox",
"ticket_count" = 2000,
"days_t0_game" = 6)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "Boston Red Sox",
"ticket_count" = 2000,
"days_t0_game" = 6)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "Boston Red Sox",
"ticket_count" = 2000,
"days_to_game" = 6)
predict(model, predict_df)
model <- lm(price~ homeTeam + awayTeam + days_to_game, data = df)
model
summary(model)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "Boston Red Sox",
# "ticket_count" = 2000,
"days_to_game" = 6)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "Boston Red Sox",
# "ticket_count" = 2000,
"days_to_game" = 0)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "Boston Red Sox",
# "ticket_count" = 2000,
"days_to_game" = 70)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "Boston Red Sox",
# "ticket_count" = 2000,
"days_to_game" = 6)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Angels",
"awayTeam" = "Boston Red Sox",
# "ticket_count" = 2000,
"days_to_game" = 6)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "San Fraancisco Giants",
"awayTeam" = "Boston Red Sox",
# "ticket_count" = 2000,
"days_to_game" = 6)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "San Francisco Giants",
"awayTeam" = "Boston Red Sox",
# "ticket_count" = 2000,
"days_to_game" = 6)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "San Francisco Giants",
"awayTeam" = "Boston Red Sox",
# "ticket_count" = 2000,
"days_to_game" = 0)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "San Francisco Giants",
"awayTeam" = "Boston Red Sox",
# "ticket_count" = 2000,
"days_to_game" = 70)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "San Francisco Giants",
"awayTeam" = "Boston Red Sox",
# "ticket_count" = 2000,
"days_to_game" = 0)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "New York Yankees",
# "ticket_count" = 2000,
"days_to_game" = 0)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "New York Yankees",
# "ticket_count" = 2000,
"days_to_game" = 7)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "New York Yankees",
# "ticket_count" = 2000,
"days_to_game" = 0)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "New York Yankees",
# "ticket_count" = 2000,
"days_to_game" = 70)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "New York Yankees",
# "ticket_count" = 2000,
"days_to_game" = 1
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "New York Yankees",
# "ticket_count" = 2000,
"days_to_game" = 1)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "New York Yankees",
# "ticket_count" = 2000,
"days_to_game" = 0
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "New York Yankees",
# "ticket_count" = 2000,
"days_to_game" = 0)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "New York Yankees",
# "ticket_count" = 2000,
"days_to_game" = 0)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "New York Yankees",
# "ticket_count" = 2000,
"days_to_game" = 70
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "New York Yankees",
# "ticket_count" = 2000,
"days_to_game" = 0)
predict(model, predict_df)
predict_df <- data.frame("homeTeam" = "Los Angeles Dodgers",
"awayTeam" = "New York Yankees",
# "ticket_count" = 2000,
"days_to_game" = 70)
predict(model, predict_df)
